import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
`;

const prod = process.argv[2] === "production";

console.log("Starting build process...");
console.log("Build mode:", prod ? "production" : "development");

esbuild
	.build({
		banner: {
			js: banner,
		},
		entryPoints: ["main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/fold",
			"@codemirror/gutter",
			"@codemirror/history",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/panel",
			"@codemirror/rangeset",
			"@codemirror/rectangular-selection",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/stream-parser",
			"@codemirror/text",
			"@codemirror/tooltip",
			"@codemirror/view",
			...builtins,
		],
		format: "cjs",
		watch: !prod,
		target: "es2016",
		logLevel: "verbose",
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outfile: "main.js",
		plugins: [
			{
				name: "logging",
				setup(build) {
					build.onStart(() => {
						console.log("\nBuild starting...");
						console.log("Time:", new Date().toISOString());
					});

					build.onEnd((result) => {
						console.log("\nBuild finished");
						console.log("Errors:", result.errors.length);
						console.log("Warnings:", result.warnings.length);

						if (result.errors.length > 0) {
							console.error("Build errors:", result.errors);
						}
						if (result.warnings.length > 0) {
							console.warn("Build warnings:", result.warnings);
						}
					});
				},
			},
		],
	})
	.catch((error) => {
		console.error("Build failed:", error);
		process.exit(1);
	});

console.log("Build configuration complete");
